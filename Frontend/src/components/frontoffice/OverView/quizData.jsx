// quizData.js
export const quizData = [
    {
      id: 1,
      title: "JavaScript Quiz",
      description: "Test your JavaScript knowledge with 10 random questions.",
      difficulty: "Medium",
      icon: "üíª",
      background: "linear-gradient(135deg, rgb(0, 84, 45), rgb(0, 57, 75))",
      details: {
        instructions: "Answer the following JavaScript questions.",
        questions: [
            { question: "What is the output of `typeof null`?", options: ["object", "null", "undefined", "boolean"], answer: "object" },
            { question: "Which method adds an element to the end of an array?", options: ["push()", "pop()", "shift()", "unshift()"], answer: "push()" },
            { question: "What does `===` operator check?", options: ["Value only", "Value and type", "Type only", "None of the above"], answer: "Value and type" },
            { question: "What is the purpose of `use strict` in JavaScript?", options: ["Enforce stricter type checking", "Enable ES6 features", "Enforce better coding practices", "None of the above"], answer: "Enforce better coding practices" },
            { question: "What is the output of `2 + '2'`?", options: ["4", "22", "NaN", "Error"], answer: "22" },
            { question: "Which keyword is used to declare a variable in ES6?", options: ["var", "let", "const", "both let and const"], answer: "both let and const" },
            { question: "What is the output of `[] + []`?", options: ["[]", "[object Object]", "''", "Error"], answer: "''" },
            { question: "What does `NaN` stand for?", options: ["Not a Number", "Null and None", "No applicable Number", "None of the above"], answer: "Not a Number" },
            { question: "Which function is used to parse a string to an integer?", options: ["parseInt()", "parseFloat()", "Number()", "toInteger()"], answer: "parseInt()" },
            { question: "What is the output of `typeof NaN`?", options: ["number", "NaN", "undefined", "object"], answer: "number" },
            { question: "What is a closure in JavaScript?", options: ["A function inside another function", "A way to encapsulate variables", "A design pattern", "All of the above"], answer: "All of the above" },
            { question: "What is the purpose of `this` in JavaScript?", options: ["Refers to the current object", "Refers to the global object", "Refers to the parent object", "Depends on the context"], answer: "Depends on the context" },
            { question: "What is the difference between `let` and `var`?", options: ["`let` is block-scoped, `var` is function-scoped", "`let` is function-scoped, `var` is block-scoped", "No difference", "`let` is hoisted, `var` is not"], answer: "`let` is block-scoped, `var` is function-scoped" },
            { question: "What is the purpose of `async` and `await`?", options: ["To handle asynchronous code", "To handle synchronous code", "To handle promises", "Both A and C"], answer: "Both A and C" },
            { question: "What is the output of `0 == false`?", options: ["true", "false", "Error", "undefined"], answer: "true" },
            { question: "Which function is used to convert a string to a floating-point number?", options: ["parseInt()", "parseFloat()", "Number()", "toFloat()"], answer: "parseFloat()" },
            { question: "Which array method removes the last element from an array?", options: ["pop()", "push()", "shift()", "unshift()"], answer: "pop()" },
            { question: "How can you check if a variable is an array?", options: ["typeof varName", "varName instanceof Array", "Array.isArray(varName)", "Both B and C"], answer: "Both B and C" },
            { question: "Which event is triggered when the DOM is fully loaded?", options: ["onload", "DOMContentLoaded", "ready", "load"], answer: "DOMContentLoaded" },
            { question: "What is the purpose of the `bind` method in JavaScript?", options: ["Creates a new function with a specific `this` value", "Executes a function immediately", "Binds an event listener", "None of the above"], answer: "Creates a new function with a specific `this` value" },
            { question: "Which JavaScript keyword is used to define a constant variable?", options: ["var", "let", "const", "define"], answer: "const" },
            { question: "What is the output of `true + true`?", options: ["2", "true", "false", "Error"], answer: "2" },
            { question: "Which operator is used for exponentiation in JavaScript?", options: ["^", "**", "exp()", "Math.pow()"], answer: "**" },
            { question: "What does `setTimeout` do?", options: ["Executes a function immediately", "Executes a function after a delay", "Repeats a function at intervals", "Stops execution"], answer: "Executes a function after a delay" },
            { question: "What is the purpose of the `map` function in JavaScript?", options: ["Modifies elements of an array", "Creates a new array with transformed elements", "Filters elements of an array", "None of the above"], answer: "Creates a new array with transformed elements" },
            { question: "What will `console.log(1 + '1' - 1)` output?", options: ["11", "10", "NaN", "Error"], answer: "10" },
            { question: "Which method is used to remove the first element from an array?", options: ["pop()", "shift()", "unshift()", "splice()"], answer: "shift()" },
            { question: "What is the default return value of a function that does not explicitly return a value?", options: ["null", "undefined", "0", "Error"], answer: "undefined" },
            { question: "How do you prevent an event from propagating in JavaScript?", options: ["event.preventDefault()", "event.stopPropagation()", "event.stopImmediatePropagation()", "Both B and C"], answer: "Both B and C" },
            { question: "Which built-in method sorts the elements of an array?", options: ["order()", "sort()", "arrange()", "None of the above"], answer: "sort()" },
            { question: "Which statement is true about `localStorage` in JavaScript?", options: ["Stores data temporarily", "Stores data permanently", "Data is cleared after a session", "It can only store objects"], answer: "Stores data permanently" },
            { question: "Which method can be used to convert an object to a JSON string?", options: ["JSON.stringify()", "JSON.parse()", "object.toJSON()", "toString()"], answer: "JSON.stringify()" },
            { question: "Which function is used to execute a function repeatedly at a specified interval?", options: ["setTimeout()", "setInterval()", "setImmediate()", "requestAnimationFrame()"], answer: "setInterval()" },
            { question: "What is the output of `typeof undefined`?", options: ["undefined", "null", "object", "string"], answer: "undefined" },
            { question: "What is the difference between `map` and `forEach`?", options: ["map returns a new array, forEach does not", "forEach returns a new array, map does not", "Both modify the original array", "None of the above"], answer: "map returns a new array, forEach does not" }
          ],
          
      },
    },
    {
      id: 2,
      title: "React Quiz",
      description: "Test your React knowledge with 10 random questions.",
      difficulty: "Medium",
      icon: "‚öõÔ∏è",
      background: "linear-gradient(135deg, rgb(198, 16, 0), rgb(109, 89, 9))",
      details: {
        instructions: "Answer the following React questions.",
        "questions": [
    { "question": "What is React?", "options": ["A JavaScript library", "A programming language", "A database", "A CSS framework"], "answer": "A JavaScript library" },
    { "question": "What is JSX?", "options": ["A syntax extension for JavaScript", "A CSS preprocessor", "A database query language", "A testing framework"], "answer": "A syntax extension for JavaScript" },
    { "question": "What is the purpose of `useState` in React?", "options": ["To manage state", "To fetch data", "To style components", "To handle routing"], "answer": "To manage state" },
    { "question": "What is the virtual DOM?", "options": ["A lightweight copy of the real DOM", "A database", "A CSS framework", "A testing tool"], "answer": "A lightweight copy of the real DOM" },
    { "question": "What does `ReactDOM.render(<App />, document.getElementById('root'))` do?", "options": ["Renders the App component to the DOM", "Throws an error", "Does nothing", "Creates a new component"], "answer": "Renders the App component to the DOM" },
    { "question": "What is the purpose of `useEffect` in React?", "options": ["To perform side effects", "To manage state", "To style components", "To handle routing"], "answer": "To perform side effects" },
    { "question": "What is a higher-order component (HOC)?", "options": ["A function that takes a component and returns a new component", "A component that renders other components", "A state management tool", "A CSS framework"], "answer": "A function that takes a component and returns a new component" },
    { "question": "What is the purpose of `key` prop in React?", "options": ["To uniquely identify elements in a list", "To style components", "To manage state", "To handle routing"], "answer": "To uniquely identify elements in a list" },
    { "question": "What is React Router?", "options": ["A library for routing in React", "A state management tool", "A CSS framework", "A testing tool"], "answer": "A library for routing in React" },
    { "question": "What is the purpose of `props` in React?", "options": ["To pass data between components", "To manage state", "To style components", "To handle routing"], "answer": "To pass data between components" },
    { "question": "What is the difference between `props` and `state`?", "options": ["`props` are immutable, `state` is mutable", "`props` are mutable, `state` is immutable", "No difference", "`props` are used for routing, `state` for styling"], "answer": "`props` are immutable, `state` is mutable" },
    { "question": "What is the purpose of `React.Fragment`?", "options": ["To group multiple elements without adding extra nodes", "To create reusable components", "To handle state", "To manage routing"], "answer": "To group multiple elements without adding extra nodes" },
    { "question": "What is the purpose of `useReducer` in React?", "options": ["To manage complex state logic", "To handle side effects", "To style components", "To handle routing"], "answer": "To manage complex state logic" },
    { "question": "What is the purpose of `React.memo`?", "options": ["To optimize functional components", "To handle state", "To manage routing", "To style components"], "answer": "To optimize functional components" },
    { "question": "What is the purpose of `useContext` in React?", "options": ["To access context in functional components", "To manage state", "To handle routing", "To style components"], "answer": "To access context in functional components" },
    { "question": "What lifecycle method is used to fetch data when a component mounts?", "options": ["componentDidMount", "componentWillUnmount", "shouldComponentUpdate", "componentDidUpdate"], "answer": "componentDidMount" },
    { "question": "What hook is used to reference a DOM element directly?", "options": ["useRef", "useEffect", "useState", "useMemo"], "answer": "useRef" },
    { "question": "What does `useMemo` do in React?", "options": ["Memoizes a computed value", "Caches API calls", "Manages component styles", "Creates reusable components"], "answer": "Memoizes a computed value" },
    { "question": "What is React Fiber?", "options": ["React's new reconciliation algorithm", "A CSS framework", "A testing library", "A UI component"], "answer": "React's new reconciliation algorithm" },
    { "question": "What is the difference between controlled and uncontrolled components?", "options": ["Controlled components use state, uncontrolled components use refs", "Uncontrolled components use state, controlled components use refs", "No difference", "Controlled components require Redux"], "answer": "Controlled components use state, uncontrolled components use refs" },
    { "question": "What is the purpose of `useCallback` in React?", "options": ["Memoizes a function", "Handles async functions", "Creates a context", "Fetches data"], "answer": "Memoizes a function" },
    { "question": "What is the default behavior of React components on state change?", "options": ["They re-render", "They remain unchanged", "They are destroyed", "They stop updating"], "answer": "They re-render" },
    { "question": "How does React handle events differently than the DOM?", "options": ["Uses synthetic events", "Uses JavaScript events directly", "Uses native event listeners", "Does not handle events"], "answer": "Uses synthetic events" },
    { "question": "What is reconciliation in React?", "options": ["The process of updating the virtual DOM", "The process of comparing states", "The process of fetching data", "The process of handling events"], "answer": "The process of updating the virtual DOM" },
    { "question": "Which hook should be used for performance optimization in React?", "options": ["useMemo", "useEffect", "useState", "useContext"], "answer": "useMemo" },
    { "question": "What is lazy loading in React?", "options": ["Loading components asynchronously", "Loading CSS on demand", "Using a caching mechanism", "Optimizing images"], "answer": "Loading components asynchronously" },
    { "question": "What is the purpose of `Suspense` in React?", "options": ["Handles loading states for lazy components", "Manages errors", "Optimizes rendering", "Handles global state"], "answer": "Handles loading states for lazy components" },
    { "question": "What is `React.PureComponent` used for?", "options": ["Optimizing class components", "Handling state", "Routing components", "Managing Redux"], "answer": "Optimizing class components" },
    { "question": "What happens when you update a state inside `useEffect` without dependencies?", "options": ["It causes an infinite loop", "It runs once", "It throws an error", "It doesn't update"], "answer": "It causes an infinite loop" }
],

      },
    },
  ];